<h1>Миксины</h1>

<h2>Validatable</h2>

<p>Специальный миксин предназначенный для обозначения объектов, способных валидироваться. Такие объекты должны содержать <code>validate</code> метод, возвращающий Promise.</p>

<h2>Validation</h2>

<p>Это основной класс валидации, примешивает к объекту методы валидации, свойства, состояния. Отстраивает композицию {{#link-to 'tutorial.mediators'}}медиаторов{{/link-to}} по схеме валидации объекта.</p>

<p><b>Тезис:</b> Проверка (check) и валидация (validate). Зачем нужно различие.</p>

<p><b>Тезис:</b> Пример использования check.</p>

<p><b>Тезис:</b> Сброс ошибок у объекта или у поля.</p>

<h3>Знакомство</h3>

<p>Сердцем валидации любой сущности является свойство <code>validationScheme</code> описывающее правила её валидации.</p>

<h4>Правила написания схемы валидации</h4>

<p><b>Тезис:</b> Предназначение групповых и частных медиаторов.</p>

<p><b>Тезис:</b> Параметры валидации на групповые медиаторы.</p>

<p><b>Тезис:</b> Параметры валидации на частные медиаторы.</p>

<p><b>Тезис:</b> Условия валидации.</p>

<p><b>Тезис:</b> Автозапуск валидации.</p>

<h4>Ошибки</h4>

<p><b>Тезис:</b> Ошибки всплывают от медиаторов и обрабатываются на уровне объекта.</p>

<p><b>Тезис:</b> На ошибки объект переходит в инвалидное состояние</p>

<h3>Model Validation</h3>

<p><b>Тезис:</b> Имеет специальный тип медиаторов.</p>

<p><b>Тезис:</b> Имеет собственные <code>DS.Errors</code>.</p>

<p><b>Тезис:</b> Имеет собственный переключатель состояний.</p>

<h3>Component Validation</h3>

<p><b>WIP</b></p>

<h2>Serializer</h2>

<p><b>WIP</b></p>

<p><b>Тезис:</b> Обработка ответа сервера и маппинг ошибок.</p>
