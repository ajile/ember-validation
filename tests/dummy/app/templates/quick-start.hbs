<h1>Quick Start</h1>

<p>Этот материал позволит вам быстро имплементировать валидацию в ваш проект. Если после него у вас останутся вопросы вы всегда можете почитать <a href="docs/index.html">документацию</a>.</p>

<p>Здесь описаны следующие шаги:</p>

<div>
  <ol>
    <li>Install Ember Validation</li>
    <li>Create a New Validatable Object</li>
    <li>Create a UI Component</li>
  </ol>
</div>

<h2>Install Ember Validation</h2>

<p>Вы можете подключить аддон к вашему проекту всего одной командой:</p>

<pre data-src="examples/quick-start/install-addon.sh"></pre>

<h2>Create a New Validatable Object</h2>

<p>Чтобы сделать объект валидируемым нужно расширить его специальным миксином <code>ValidationMixin</code>, а также описать правила валидации объекта. Они описываются в свойстве <code>validationScheme</code>. По этой схеме создаются специальные объекты-медиаторы (именно они вызывают валидиторы для каждого поля, передавая в них объект, имя свойства и параметры).</p>

<p>К примеру, создадим класс <code>user</code>, который сделаем валидируемым:</p>

<pre data-src="examples/quick-start/declare-object.javascript" data-line="5-23" class="line-numbers"></pre>

<p>Теперь у объекта появился метод <code>validate</code>. Если его вызвать, модель может стать невалидной (<code>isValid:false</code>). Ошибки, которые возвращают валидаторы укладываются в свойство модели <code>errors</code>. Подробнее об ошибках вы можете узнать {{#link-to "tutorial.errors"}}здесь{{/link-to}}.</p>

<p>Схема валидации выглядит довольно гибко. Она позволяет параметризировать медиаторы и валидаторы, тем самым влиять на поведение валидации. Правда она смотрится громоздко. Часть этой схемы можно запрятать в отдельные модули, называемые <code>preset</code>, об этом типе объекта речь пойдет ниже. При работе с моделями <code>ember-data</code> зачастую столь сложный механизм валидации вовсе и не нужен. Порой достаточно лишь проверить наличие значения и его тип для каждого поля.</p>

<p>Чтобы код был более читаемым, а настройка валидации более унифицированной мы предусмотрели особый тип объекта, назваемый <code>preset</code>. Такие объекты разполагаются в специальной директории <code>presets</code>, каждый из них содержит правила валидации под тип поля. С их помощью возможно делать так:</p>

<pre data-src="examples/quick-start/declare-object-with-presets.javascript" data-line="7-9" class="line-numbers"></pre>

<p>Выглядит удобно не правда ли? :) Мы сократили количество кода, тем самым сделав его более читаемым, а также вынесли часть схемы валидации в отдельный объект, который теперь можно использовать повторно. Итак как это работает?</p>

<p>При создании объекта для каждого его аттрибута берется пресет по типу и создается небольшой кусочек правила валидации (<code>validationScheme</code>). К примеру для поля типа <code>string</code> мы берем одноименный пресет, он генерит нам список валидаторов с предустановленными параметрами валидации, требуемые для проверки этого типа поля. Набор валидаторов, как и их свойства зависят от свойств самого поля. Например для поля <code>username</code>, из примера выше, будет создано 2-а валидатора: <code>required</code>, для проверки заполненности поля и <code>string</code> для проверки типа данных в нем. Причем <code>string</code> валидатор будет вызываться с параметром <code>max</code>, для проверки длины строки.</p>

<p>Более подробно о том как это работает вы можете почитать в {{#link-to "tutorial.presets"}}специальном разделе{{/link-to}}.</p>

<p>Так выглядит проверка валидности данных объекта:</p>

<pre data-src="examples/quick-start/validate-object.javascript" class="line-numbers"></pre>

<h2>Create a UI Component</h2>

<pre data-src="examples/quick-start/form.handlebars" class="line-numbers"></pre>
